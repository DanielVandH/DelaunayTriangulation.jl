@testset "How well can we locate many points?" begin
    p1 = Float64[20, 20]
    p2 = Float64[0, 6]
    p3 = Float64[12, -2]
    p4 = Float64[10, 10]
    PTS = [p1, p2, p3, p4]
    root = DT.TriangleType((DT.LargeRightIdx + 1, DT.LargeLeftIdx, DT.LargeRightIdx))
    𝒯, 𝒟, 𝒜, 𝒜⁻¹, 𝒟𝒢 = DT.triangulate(PTS; shuffle_pts=false, trim=false, sort_pts=false)
    T₁ = DT.TriangleType((-1, 2, 1))
    T₂ = DT.TriangleType((-1, 0, 2))
    T₃ = DT.TriangleType((2, 0, 3))
    T₄ = DT.TriangleType((3, 0, 1))
    T₅ = DT.TriangleType((2, 3, 4))
    T₆ = DT.TriangleType((4, 3, 1))
    T₇ = DT.TriangleType((1, 2, 4))
    tris = [T₁, T₂, T₃, T₄, T₅, T₆, T₇]
    test_points = [ # T₁, T₂, T₃, T₄, T₅, T₆, T₇
        [
            Float64[-16.4426676644351, 24.09794252666],
            Float64[-15.8277064561095, 21.1768767871135],
            Float64[-10.6005361853419, 21.7918379954391],
            Float64[-10.1393152790977, 17.4871095371599],
            Float64[-3.8359628937604, 19.6394737662995],
            Float64[-3.682222591679, 15.1810050059389],
            Float64[4.6197537207165, 18.1020707454855],
            Float64[2.6211297936583, 13.7973422872063],
            Float64[-2.144819570865, 13.1823810788807],
            Float64[0, 10],
            Float64[7.6945597623445, 15.1810050059389],
            Float64[-31.8166978725749, 27.0190082662066],
            Float64[-29.0493724351097, 25.635345547474],
            Float64[-24.5909036747492, 25.635345547474],
            Float64[-24.2834230705864, 21.6380976933577]
        ], [
            Float64[-32.5853993829819, 23.329241016253],
            Float64[-29.8180739455167, 22.2530589016833],
            Float64[-27.204488810133, 19.9469543704623],
            Float64[-23.360981258098, 17.4871095371599],
            Float64[-23.360981258098, 14.4123034955319],
            Float64[-19.9786946123072, 15.1810050059389],
            Float64[-17.5188497790049, 12.7211601726365],
            Float64[-17.9800706852491, 10.4150556414155],
            Float64[-13.9828228311327, 10.1075750372527],
            Float64[-13.3678616228071, 6.5715480893806],
            Float64[-9.3706137686907, 7.1865092977062],
            Float64[-8.6019122582837, 3.8042226519154],
            Float64[-5.8345868208186, 4.2654435581596],
            Float64[-4.6046644041674, 1.1906375165316],
            Float64[0, 0],
            Float64[0, -3.1140909417475],
            Float64[3.0823506999025, -6.6501178896197],
            Float64[4.4660134186351, -10.3398851395733],
            Float64[6.3108970436119, -15.259574806178],
            Float64[10.4618851998097, -21.5629271915154],
            Float64[13.0754703351934, -26.021395951876],
            Float64[15.99653607474, -29.7111632018295],
            Float64[17.9951600017982, -33.5546707538645],
            Float64[7.0795985540189, -20.0255241707014],
            Float64[-3.2210016854348, -8.0337806083523],
            Float64[-7.9869510499581, -1.4229476188522],
            Float64[-10, 0],
            Float64[-13.3678616228071, 1.6518584227758],
            Float64[-17.0576288727607, 5.4953659748108],
            Float64[-20.7473961227142, 11.7987183601481],
            Float64[0, -10],
            Float64[-3.0672613833534, -3.882792452145],
            Float64[3.6973119082281, -14.1833926916083],
            Float64[7.3870791581817, -9.8786642333291],
            Float64[9.6931836894027, -13.8759120874455]
        ], [
            Float64[6.48923898227807, -0.836939202696],
            Float64[9.1630686787196, -2.5481902084178],
            Float64[7.3448644851412, -3.4038157112782],
            Float64[10.0186941815801, -4.3663944019962],
            Float64[10.2326005572952, -7.3610836620079],
            Float64[12.4786175023039, -8.8584282920137],
            Float64[12.9064302537341, -13.4574153698886],
            Float64[15.6872131380306, -13.9921813091764],
            Float64[16.2219790773184, -17.3077301327607],
            Float64[19.3236215251875, -22.3345299620659]
        ], [
            Float64[20, 10],
            Float64[17.5054173316091, 1.088218177392],
            Float64[20.6070597794782, 6.435877571617],
            Float64[20.6070597794782, -3.7246752748509],
            Float64[22.8530767244869, -0.5160796391242],
            Float64[22.5322171609142, -14.5269472484642],
            Float64[25.2060468573532, -13.9921813091764],
            Float64[24.5643277302078, -18.0564024477636],
            Float64[17.0776045801788, 5.6872052566141],
            Float64[19.3236215251875, 13.2808815945007],
            Float64[15.2594003866004, 3.548141499463],
            Float64[16.2248449458921, 9.61832326012033] # on edge, actually
        ], [
            Float64[1.3923602127206, 5.9850494995239],
            Float64[2, 6],
            Float64[2.3124378488878, 6.2406266206815],
            Float64[3.436977181981, 6.5984345903021],
            Float64[4.3570548181482, 6.7006654387651],
            Float64[6.5294603479873, 7.0840311205014],
            Float64[8.4207310445532, 7.6207430749322],
            Float64[9.3152509686046, 7.1351465447329],
            Float64[9.7752897866881, 5.3972221208616],
            Float64[10.0819823320772, 3.2503743031382],
            Float64[9.6475012261094, 1.8702578488874],
            Float64[7.4750956962702, 2.1769503942765],
            Float64[4.6381896514215, 3.684855409106],
            Float64[4.7404204998845, 5.3205489845143],
            Float64[7.705115105312, 5.4994529693246],
            Float64[6.8617106054921, 3.9915479544951],
            Float64[9.6986166503409, 9.4608983472666],
            Float64[6, 2] # on edge, actually 
        ], [
            Float64[11.2815517758896, 9.5280260019559],
            Float64[11.9442106260867, 10.4746815022374],
            Float64[11.7864347093731, 9.3702500852423],
            Float64[12.0388761761148, 8.4867049516463],
            Float64[12.133541726143, 6.7511698677969],
            Float64[12.3859831928847, 4.7947485005485],
            Float64[13.80596644307, 8.3920394016181],
            Float64[13.3010835098235, 10.632457418951],
            Float64[13.3010835098235, 12.2733269527723],
            Float64[14.1846286434195, 13.2199824530537],
            Float64[14.8157323102739, 12.4626580528286],
            Float64[15.6361670771845, 13.7564205698799],
            Float64[16.4566018440951, 14.3875242367342],
            Float64[16.361936294067, 15.0186279035886],
            Float64[17.1508158776349, 15.4604004703866],
            Float64[16.8352640440277, 15.9652834038701],
            Float64[18.0659161945737, 16.6279422540671],
            Float64[16, 16] # on edge, actually
        ], [
            Float64[4.3451487465544, 8.6387435622976],
            Float64[5.2631177165243, 8.6387435622976],
            Float64[5.9515944440018, 8.7534896835438],
            Float64[6.783503823037, 9.8435778353831],
            Float64[8.2465168689266, 10.5320545628605],
            Float64[9.0784262479618, 10.4173084416143],
            Float64[9.9103356269971, 10.8476063962877],
            Float64[10, 12],
            Float64[9.5374107329468, 12.396679033112],
            Float64[10.7709315363439, 13.0851557605894],
            Float64[11.7462735669369, 13.113842290901],
            Float64[12.2052580519219, 12.91303657872],
            Float64[13.0658539612687, 13.83100554869],
            Float64[12.7789886581531, 14.5194822761674],
            Float64[13.8403902796808, 14.9210937005293],
            Float64[14.414120885912, 14.806347579283],
            Float64[14.4714939465351, 15.7530030795645],
            Float64[16, 16] # on edge, actually
        ]]
    T_located = [Vector{DT.TriangleType}(undef, length(test_points[i])) for i in 1:7]
    T_flag = [Vector{Int64}(undef, length(test_points[i])) for i in 1:7]
    for i in 5:7 # each triangle's test points 
        for j in eachindex(test_points[i])
            T_located[i][j], T_flag[i][j] = DT.locate_triangle(𝒟, PTS, test_points[i][j], root)
            @test T_flag[i][j] == 1 || (j == length(test_points[i]) && T_flag[i][j] == 0)
            if T_flag[i][j] ≠ 0
                @test T_located[i][j] == tris[i] ||
                      T_located[i][j] == (tris[i][2], tris[i][3], tris[i][1]) ||
                      T_located[i][j] == (tris[i][3], tris[i][1], tris[i][2])
            end
        end
    end
end

@testset "Handling the large triangle" begin
    #= What should happen:
        pᵢ → p₀
           - If pⱼ > pᵢ, isleft 
           - If pⱼ < pᵢ, isright 
        p₀ → pᵢ
           - If pⱼ > pᵢ, isright 
           - If pⱼ < pᵢ, isleft 
        pᵢ → p₋₁
           - If pⱼ > pᵢ, isright
           - If pⱼ < pᵢ, isleft 
        p₋₁ → pᵢ
           - If pⱼ > pᵢ, isleft
           - If pⱼ < pᵢ, isright 
        p₀ → p₋₁
           -             isright 
        p₋₁ → p₀    
           -             isleft 
    =#
    i = 1
    # Case I, II: pᵢ → p₀, p₀ → pᵢ
    pᵢ = Float64[2.371, 4.81]
    pⱼ = Float64[-2.9, 4.37]
    @test DT.is_point_lower(pⱼ, pᵢ)
    @test DT.leftofline([pᵢ], pⱼ, i, 0) == -1
    @test DT.leftofline([pᵢ], pⱼ, 0, i) == 1
    pⱼ = Float64[4.832, 5.91]
    @test DT.is_point_higher(pⱼ, pᵢ)
    @test DT.leftofline([pᵢ], pⱼ, i, 0) == 1
    @test DT.leftofline([pᵢ], pⱼ, 0, 1) == -1
    pⱼ = Float64[1.2, 4.81]
    @test DT.is_point_higher(pⱼ, pᵢ)
    @test DT.leftofline([pᵢ], pⱼ, i, 0) == 1
    @test DT.leftofline([pᵢ], pⱼ, 0, 1) == -1

    i = 2
    pᵢ = Float64[2.371, 4.81]
    pⱼ = Float64[-2.9, 4.37]
    @test DT.is_point_lower(pⱼ, pᵢ)
    @test DT.leftofline([pᵢ * 0, pᵢ], pⱼ, i, 0) == -1
    @test DT.leftofline([pᵢ * 0, pᵢ], pⱼ, 0, i) == 1
    pⱼ = Float64[4.832, 5.91]
    @test DT.is_point_higher(pⱼ, pᵢ)
    @test DT.leftofline([pᵢ * 0, pᵢ], pⱼ, i, 0) == 1
    @test DT.leftofline([pᵢ * 0, pᵢ], pⱼ, 0, 1) == -1
    pⱼ = Float64[1.2, 4.81]
    @test DT.is_point_higher(pⱼ, pᵢ)
    @test DT.leftofline([pᵢ * 0, pᵢ], pⱼ, i, 0) == 1
    @test DT.leftofline([pᵢ * 0, pᵢ], pⱼ, 0, 1) == -1

    # Case III, IV: pᵢ → p₋₁, p₋₁ → pᵢ
    i = 1
    pᵢ = Float64[2.371, 4.81]
    pⱼ = Float64[-2.9, 4.37]
    @test DT.is_point_lower(pⱼ, pᵢ)
    @test DT.leftofline([pᵢ], pⱼ, i, -1) == 1
    @test DT.leftofline([pᵢ], pⱼ, -1, i) == -1
    pⱼ = Float64[4.832, 5.91]
    @test DT.is_point_higher(pⱼ, pᵢ)
    @test DT.leftofline([pᵢ], pⱼ, i, -1) == -1
    @test DT.leftofline([pᵢ], pⱼ, -1, 1) == 1
    pⱼ = Float64[1.2, 4.81]
    @test DT.is_point_higher(pⱼ, pᵢ)
    @test DT.leftofline([pᵢ], pⱼ, i, -1) == -1
    @test DT.leftofline([pᵢ], pⱼ, -1, 1) == 1

    i = 2
    pᵢ = Float64[2.371, 4.81]
    pⱼ = Float64[-2.9, 4.37]
    @test DT.is_point_lower(pⱼ, pᵢ)
    @test DT.leftofline([pᵢ * 0, pᵢ], pⱼ, i, -1) == 1
    @test DT.leftofline([pᵢ * 0, pᵢ], pⱼ, -1, i) == -1
    pⱼ = Float64[4.832, 5.91]
    @test DT.is_point_higher(pⱼ, pᵢ)
    @test DT.leftofline([pᵢ * 0, pᵢ], pⱼ, i, -1) == -1
    @test DT.leftofline([pᵢ * 0, pᵢ], pⱼ, -1, 1) == 1
    pⱼ = Float64[1.2, 4.81]
    @test DT.is_point_higher(pⱼ, pᵢ)
    @test DT.leftofline([pᵢ * 0, pᵢ], pⱼ, i, -1) == -1
    @test DT.leftofline([pᵢ * 0, pᵢ], pⱼ, -1, 1) == 1

    # Case V: p₀ → p₋₁
    @test DT.leftofline([pᵢ], pⱼ, 0, -1) == -1

    # Case VI: p₋₁ → p₀
    @test DT.leftofline([pᵢ], pⱼ, -1, 0) == 1
end

